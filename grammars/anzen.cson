'scopeName': 'source.anzen'
'name': 'Anzen'
'firstLineMatch': '^#!\\s*/.*\\banzen'
'fileTypes': [
  'anzen'
  'azn'
]
'patterns': [
  {
    'include': '#comments'
  }
  {
    # Keywords that denote flow conditionals.
    'name': 'keyword.control.conditional.anzen'
    'match': '\\b(if|else|switch)\\b'
  }
  {
    # Keywords that denote loops.
    'name': 'keyword.control.repeat.anzen'
    'match': '\\b(for|while)\\b'
  }
  {
    # Keywords that alter flow from within a block.
    'name': 'keyword.control.statement.anzen'
    'match': '\\b(break|continue|return)\\b'
  }
  {
    # Keywords that denote casting operators.
    'name': 'keyword.operator.casting.anzen'
    'match': '\\b(as|is)\\b'
  }
  {
    # Keywords that denote logical expressions.
    'name': 'keyword.operator.logical.anzen'
    'match': '\\b(and|or)\\b'
  }
  {
    # Keywords that denote reserved method names.
    'name': 'keyword.reserved.anzen'
    'match': '\\b(new|del|get|set)\\b'
  }
  {
    # Other keywords.
    'name': 'keyword.other.anzen'
    'match': '\\b(static|mutating|in|where|import)\\b'
  }
  {
    # Qualifiers.
    'name': 'keyword.qualifer.anzen'
    'match': '@\\w+'
  }
  {
    'name': 'keyword.operator.comparison.anzen'
    'match': '<\\=|>\\=|<|>|\\=\\=\\=|\\!\\=\\=|\\=\\=|\\!\\=|~\\='
  }
  {
    'match': '\\+\\=|-\\=|\\*\\=|/\\=|%\\=|&\\=|\\|\\=|\\^\\='
    'name': 'keyword.operator.assignment.augmented.anzen'
  }
  {
    'match': '\\=|&-|<-'
    'name': 'keyword.operator.assignment.anzen'
  }
  {
    'match': '\\+|\\-|\\*|/|%'
    'name': 'keyword.operator.arithmetic.anzen'
  }
  {
    # Identifiers that denote language constants.
    'name': 'constant.language.anzen'
    'match': '\\b(true|false)\\b'
  }
  {
    'include': '#expressions'
  }
  {
    'include': '#type-signatures'
  }
  {
    'include': '#prop-decl'
  }
  {
    'include': '#fun-decl'
  }
  {
    'include': '#struct-decl'
  }
  {
    'include': '#interface-decl'
  }
  {
    'include': '#extension-decl'
  }
]
'repository':
  'comments':
    'patterns': [
      {
        'name': 'comment.block.anzen'
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.anzen'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.anzen'
        'patterns': [
          {
            'include': '#comments'
          }
        ]
      },
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.anzen'
        'end': '(?!\\G)'
        'patterns': [
          {
            'name': 'comment.line.double-slash.anzen'
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.anzen'
            'end': '\\n'
            'patterns': [
              {
                'name': 'punctuation.separator.continuation.anzen'
                'match': '(?>\\\\\\s*\\n)'
              }
            ]
          }
        ]
      }
    ]
  'expressions':
    'patterns': [
      {
        'include': '#literals'
      }
      {
      'include': '#calls'
      }
    ]
  'literals':
    'patterns': [
      {
        'include': '#strings'
      }
      {
        'include': '#numbers'
      }
    ]
  'calls':
    'patterns': [
      {
        'begin': '(\\w+)\\s*(\\()'
        'beginCaptures':
          '1':
            'name': 'entity.name.function.anzen'
          '2':
            'name': 'punctuation.definition.parameters.begin'
        'end':
          '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.parameters.end'
        'patterns': [
          {
            'include': '#call-args'
          }
          {
            'include': '#expressions'
          }
        ]
      }
      {
        'begin': '(\\()'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.parameters.begin'
        'end':
          '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.parameters.end'
        'patterns': [
          {
            'include': '#call-args'
          }
          {
            'include': '#expressions'
          }
        ]
      }
    ]
  'call-args':
    'patterns': [
      {
        'match': '(\\w+)\\s*(?:&-|<-|=)'
        'captures':
          '1':
            'name': 'entity.name.variable.anzen'
      }
    ]
  'strings':
    'patterns': [
      'begin': '"'
      'beginCaptures':
        '1':
          'name': 'punctuation.definition.string.begin.anzen'
      'end': '"'
      'endCaptures':
        '1':
          'name': 'punctuation.definition.string.end.anzen'
      'name': 'string.quoted.double.anzen'
    ]
  'numbers':
    'patterns': [
      {
        'match': '0|(?:[1-9][0-9]*)\\.[0-9]+(?:[Ee][+-]?[0-9]+)',
        'name': 'constant.numeric.float.anzen'
      }
      {
        'match': '\\b(0|[1-9][0-9]*(\\.[0-9]+)?([Ee][+-]?[0-9]+)?)',
        'name': 'constant.numeric.decimal.anzen'
      }
    ]
  'type-signatures':
    'patterns': [
      {
        'include': '#builtin-types'
      }
    ]
  'builtin-types':
    'patterns': [
      {
        'name': 'support.type.anzen'
        'match': '(?x) \\b(Type
          |Nothing
          |Anything
          |Self
          |Int
          |Double
          |String
          |Bool
          |Array
          |Map
          |Set
          |Optional
          |Fallible
          |Error)\\b'
      }
    ]
  'prop-decl':
    'patterns': [
      {
        'match': '\\b(let|var)\\s+(\\w+)'
        'captures':
          '1':
            'name': 'storage.type.reassignability.anzen'
          '2':
            'name': 'entity.name.variable.anzen'
      }
    ]
  'fun-decl':
    'patterns': [
      {
        'match': '\\b(fun)\\s+(\\w+)?'
        'captures':
          '1':
            'name': 'storage.type.function.anzen'
          '2':
            'name': 'entity.name.function.anzen'
      }
    ]
  'struct-decl':
    'patterns': [
      {
        'match': '\\b(struct)\\s+(\\w+)'
        'captures':
          '1':
            'name': 'storage.type.struct.anzen'
          '2':
            'name': 'entity.name.struct.anzen'
      }
    ]
  'interface-decl':
    'patterns': [
      {
        'match': '\\b(interface)\\s+(\\w+)'
        'captures':
          '1':
            'name': 'storage.type.interface.anzen'
          '2':
            'name': 'entity.name.interface.anzen'
      }
    ]
  'extension-decl':
    'patterns': [
      {
        'match': '\\b(extension)\\s+(\\w+)'
        'captures':
          '1':
            'name': 'storage.type.extension.anzen'
          '2':
            'name': 'entity.name.extension.anzen'
      }
    ]
